// <auto-generated />
using HotelMedium.Web.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HotelMedium.Web.Migrations
{
    [DbContext(typeof(HotelContext))]
    [Migration("20171221233158_Hotel Medium")]
    partial class HotelMedium
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HotelMedium.Web.Models.AccessCodes", b =>
                {
                    b.Property<string>("AccessCodeId")
                        .HasColumnName("AccessCodeID")
                        .HasColumnType("nchar(10)");

                    b.Property<int>("ReservationId")
                        .HasColumnName("ReservationID");

                    b.HasKey("AccessCodeId");

                    b.HasIndex("ReservationId");

                    b.ToTable("AccessCodes");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Bills", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BillID");

                    b.Property<int>("ClientId")
                        .HasColumnName("ClientID");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("IssuedOn")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ReservationId")
                        .HasColumnName("ReservationID");

                    b.Property<decimal>("Total");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("BillId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Cities", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CityID");

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Clients", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClientID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CityId")
                        .HasColumnName("CityID");

                    b.Property<int>("CreditCardCsc")
                        .HasColumnName("CreditCardCSC");

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasMaxLength(19);

                    b.Property<DateTime>("DateCardExpiration")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("ClientId");

                    b.HasIndex("CityId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Countries", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CountryID");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("ProfilePicture");

                    b.Property<byte[]>("ProfilePictureThumb");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.EventHalls", b =>
                {
                    b.Property<int>("EventHallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventHallID");

                    b.Property<int>("Capacity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("EventHallId");

                    b.ToTable("EventHalls");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Events", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventID");

                    b.Property<decimal>("Amount");

                    b.Property<int>("EventHallId")
                        .HasColumnName("EventHallID");

                    b.Property<int>("EventTypeId")
                        .HasColumnName("EventTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("EventId");

                    b.HasIndex("EventHallId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.EventTypes", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ExtraFeatures", b =>
                {
                    b.Property<int>("ExtraFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ExtraFeatureID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ExtraFeatureId");

                    b.ToTable("ExtraFeatures");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Offers", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OfferID");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("OfferId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ReservationOffers", b =>
                {
                    b.Property<int>("ReservationOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReservationOfferID");

                    b.Property<int>("OfferId")
                        .HasColumnName("OfferID");

                    b.Property<int>("ReservationId")
                        .HasColumnName("ReservationID");

                    b.HasKey("ReservationOfferId");

                    b.HasIndex("OfferId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationOffers");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Reservations", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReservationID");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ClientId")
                        .HasColumnName("ClientID");

                    b.Property<DateTime>("DateReserved")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NumberOfPeople");

                    b.Property<int>("RoomId")
                        .HasColumnName("RoomID");

                    b.HasKey("ReservationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ReservationServices", b =>
                {
                    b.Property<int>("ReservationServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReservationServiceID");

                    b.Property<DateTime>("DateReserved")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ReservationId")
                        .HasColumnName("ReservationID");

                    b.Property<int>("ServiceId")
                        .HasColumnName("ServiceID");

                    b.HasKey("ReservationServiceId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ReservationServices");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ReservationServicesExtraFeatures", b =>
                {
                    b.Property<int>("ExtraFeatureId")
                        .HasColumnName("ExtraFeatureID");

                    b.Property<int>("ReservationServiceId")
                        .HasColumnName("ReservationServiceID");

                    b.HasKey("ExtraFeatureId", "ReservationServiceId");

                    b.HasIndex("ReservationServiceId");

                    b.ToTable("ReservationServicesExtraFeatures");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Rooms", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoomID");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("RoomTypeId")
                        .HasColumnName("RoomTypeID");

                    b.HasKey("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.RoomTypeGallery", b =>
                {
                    b.Property<int>("RoomTypeGalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoomTypeGalleryID");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RoomTypeId")
                        .HasColumnName("RoomTypeID");

                    b.Property<byte[]>("RoomTypeImage");

                    b.HasKey("RoomTypeGalleryId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("RoomTypeGallery");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.RoomTypes", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoomTypeID");

                    b.Property<int>("Capacity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("RoomTypeId");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Salaries", b =>
                {
                    b.Property<int>("SalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalaryID");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EmployeeID");

                    b.HasKey("SalaryId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Services", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ServiceID");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ServicesExtraFeatures", b =>
                {
                    b.Property<int>("ExtraFeatureId")
                        .HasColumnName("ExtraFeatureID");

                    b.Property<int>("ServiceId")
                        .HasColumnName("ServiceID");

                    b.HasKey("ExtraFeatureId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesExtraFeatures");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.TourLocations", b =>
                {
                    b.Property<int>("TourLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TourLocationID");

                    b.Property<decimal>("Distance");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("TourLocationId");

                    b.ToTable("TourLocations");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Tours", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TourID");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("TourLocationId")
                        .HasColumnName("TourLocationID");

                    b.Property<int>("TourTypeId")
                        .HasColumnName("TourTypeID");

                    b.HasKey("TourId");

                    b.HasIndex("TourLocationId");

                    b.HasIndex("TourTypeId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ToursClients", b =>
                {
                    b.Property<int>("TourClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TourClientID");

                    b.Property<int>("ClientId")
                        .HasColumnName("ClientID");

                    b.Property<int>("TourId")
                        .HasColumnName("TourID");

                    b.HasKey("TourClientId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TourId");

                    b.ToTable("ToursClients");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.TourTypes", b =>
                {
                    b.Property<int>("TourTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TourTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("TourTypeId");

                    b.ToTable("TourTypes");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.AccessCodes", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.Reservations", "Reservation")
                        .WithMany("AccessCodes")
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("FK_AccessCodes_ReservationID");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Bills", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.Clients", "Client")
                        .WithMany("Bills")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Bills_Clients");

                    b.HasOne("HotelMedium.Web.Models.Reservations", "Reservation")
                        .WithMany("Bills")
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("FK_Reservations_Bills");

                    b.HasOne("HotelMedium.Web.Models.Employees", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Bills");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Cities", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.Countries", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_City_Country");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Clients", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.Cities", "City")
                        .WithMany("Clients")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Clients_CityID");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Events", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.EventHalls", "EventHall")
                        .WithMany("Events")
                        .HasForeignKey("EventHallId")
                        .HasConstraintName("FK_Events_EventHallID");

                    b.HasOne("HotelMedium.Web.Models.EventTypes", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .HasConstraintName("FK_Events_EventTypeID");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ReservationOffers", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.Offers", "Offer")
                        .WithMany("ReservationOffers")
                        .HasForeignKey("OfferId")
                        .HasConstraintName("FK_ReservationOffers_OfferID");

                    b.HasOne("HotelMedium.Web.Models.Reservations", "Reservation")
                        .WithMany("ReservationOffers")
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("FK_ReservationOffers_ReservationID");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Reservations", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.Clients", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Clients_Reservations");

                    b.HasOne("HotelMedium.Web.Models.Rooms", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_Rooms_Reservations");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ReservationServices", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.Reservations", "Reservation")
                        .WithMany("ReservationServices")
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("FK_ReservationServices_ReservationID");

                    b.HasOne("HotelMedium.Web.Models.Services", "Service")
                        .WithMany("ReservationServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ReservationServices_ServiceID");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ReservationServicesExtraFeatures", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.ExtraFeatures", "ExtraFeature")
                        .WithMany("ReservationServicesExtraFeatures")
                        .HasForeignKey("ExtraFeatureId")
                        .HasConstraintName("FK_ReservationServicesExtraFeatures_ExtraFeatureID");

                    b.HasOne("HotelMedium.Web.Models.ReservationServices", "ReservationService")
                        .WithMany("ReservationServicesExtraFeatures")
                        .HasForeignKey("ReservationServiceId")
                        .HasConstraintName("FK_ReservationServicesExtraFeatures_ReservationServiceID");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Rooms", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.RoomTypes", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .HasConstraintName("FK_RoomTypes_Rooms");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.RoomTypeGallery", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.RoomTypes", "RoomType")
                        .WithMany("RoomTypeGallery")
                        .HasForeignKey("RoomTypeId")
                        .HasConstraintName("FK_RoomTypes_RoomTypeGallery");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Salaries", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.Employees", "Employee")
                        .WithMany("Salaries")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Salaries_EmployeeID");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ServicesExtraFeatures", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.ExtraFeatures", "ExtraFeature")
                        .WithMany("ServicesExtraFeatures")
                        .HasForeignKey("ExtraFeatureId")
                        .HasConstraintName("FK_ServicesExtraFeatures_ExtraFeatureID");

                    b.HasOne("HotelMedium.Web.Models.Services", "Service")
                        .WithMany("ServicesExtraFeatures")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ServicesExtraFeatures_ServiceID");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.Tours", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.TourLocations", "TourLocation")
                        .WithMany("Tours")
                        .HasForeignKey("TourLocationId")
                        .HasConstraintName("FK_Tours_TourLocationID");

                    b.HasOne("HotelMedium.Web.Models.TourTypes", "TourType")
                        .WithMany("Tours")
                        .HasForeignKey("TourTypeId")
                        .HasConstraintName("FK_Tours_TourTypeID");
                });

            modelBuilder.Entity("HotelMedium.Web.Models.ToursClients", b =>
                {
                    b.HasOne("HotelMedium.Web.Models.Clients", "Client")
                        .WithMany("ToursClients")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ToursClients_ClientID");

                    b.HasOne("HotelMedium.Web.Models.Tours", "Tour")
                        .WithMany("ToursClients")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK_ToursClients_TourID");
                });
#pragma warning restore 612, 618
        }
    }
}
